name: Build and Package
on: [push]

jobs:
  build-mac:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '19'
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: |
        npm i
        npm i appdmg
    - name: Package
      run: npm run make
    - name: Upload DMG
      uses: actions/upload-artifact@v2
      with:
        name: animref-dmg
        path: out/make/**/animref-*.dmg
    - name: Upload ZIP (macOS)
      uses: actions/upload-artifact@v2
      with:
        name: animref-mac-zip
        path: out/make/**/animref-darwin-arm64-*.zip
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '19'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
      
      - name: Install Flatpak dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y flatpak flatpak-builder elfutils dpkg rpm
          flatpak --user remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
          git config --global protocol.file.allow always

      - name: Package for Linux
        run: npm run make

      - name: Upload Flatpak
        uses: actions/upload-artifact@v2
        with:
          name: animref-flatpak
          path: out/make/**/io.atom.electron.animref_stable_x86_64.flatpak
      
      - name: Upload RPM
        uses: actions/upload-artifact@v2
        with:
          name: animref-rpm
          path: out/make/**/animref-*.rpm
      
      - name: Upload DEB
        uses: actions/upload-artifact@v2
        with:
          name: animref-deb
          path: out/make/**/animref_*.deb   
  build-win:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '19'
      - name: Install dependencies
        run: npm i
      - name: Package
        run: npm run make
      - name: Upload EXE
        uses: actions/upload-artifact@v2
        with:
          name: animref-exe
          path: out/make/**/animref-*Setup.exe
      - name: Upload ZIP (Windows)
        uses: actions/upload-artifact@v2
        with:
          name: animref-win-zip
          path: out/make/**/animref-win32-x64-*.zip
  create-release:
    needs: [build-mac, build-linux, build-win]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Extract version
      id: get_version
      run: |
        VERSION=$(jq -r '.version' package.json)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
   
    - name: Download Artifacts
      uses: actions/download-artifact@v2

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: AnimRef v${{ env.VERSION }}
        draft: true
        prerelease: false
    - name: List directory structure
      run: |
        sudo apt-get install -y tree
        tree .
    - name: Find DMG File
      id: find_dmg
      run: |
        DMG_PATH=$(find . -name "animref*.dmg" -print -quit)
        echo "DMG_PATH=$DMG_PATH" >> $GITHUB_ENV
    - name: Upload DMG to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.DMG_PATH }}
        asset_name: animref-arm64-${{ env.VERSION }}.dmg
        asset_content_type: application/octet-stream

    - name: Find Mac ZIP File
      id: find_zip
      run: |
        MAC_ZIP_PATH=$(find . -name "animref-darwin-arm64-*.zip" -print -quit)
        echo "MAC_ZIP_PATH=$MAC_ZIP_PATH" >> $GITHUB_ENV
    - name: Upload macOS ZIP to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.MAC_ZIP_PATH }}
        asset_name: animref-darwin-arm64-${{ env.VERSION }}.zip
        asset_content_type: application/zip

    - name: Find RPM File
      id: find_rpm
      run: |
        RPM_PATH=$(find . -name "animref-*.rpm" -print -quit)
        echo "RPM_PATH=$RPM_PATH" >> $GITHUB_ENV
    - name: Upload RPM to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.RPM_PATH }}
        asset_name: animref-${{ env.VERSION }}.rpm
        asset_content_type: application/x-rpm

    - name: Find DEB File
      id: find_deb
      run: |
        DEB_PATH=$(find . -name "animref_*.deb" -print -quit)
        echo "DEB_PATH=$DEB_PATH" >> $GITHUB_ENV
    - name: Upload DEB to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.DEB_PATH }}
        asset_name: animref_${{ env.VERSION }}.deb
        asset_content_type: application/vnd.debian.binary-package

    - name: Find Flatpak File
      id: find_flatpak
      run: |
        FLATPAK_PATH=$(find . -name "io.atom.electron.animref_stable_x86_64.flatpak" -print -quit)
        echo "FLATPAK_PATH=$FLATPAK_PATH" >> $GITHUB_ENV
    - name: Upload Flatpak to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.FLATPAK_PATH }}
        asset_name: io.atom.electron.animref_stable_x86_64-${{ env.VERSION }}.flatpak
        asset_content_type: application/octet-stream

    - name: Find Windows EXE File
      id: find_exe
      run: |
        EXE_PATH=$(find . -name "animref-*Setup.exe" -print -quit)
        echo "EXE_PATH=$EXE_PATH" >> $GITHUB_ENV
    - name: Upload Windows EXE to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.EXE_PATH }}
        asset_name: animref-${{ env.VERSION }}-Setup.exe
        asset_content_type: application/octet-stream

    - name: Find Windows ZIP File
      id: find_win_zip
      run: |
        WIN_ZIP_PATH=$(find . -name "animref-win32-x64-*.zip" -print -quit)
        echo "WIN_ZIP_PATH=$WIN_ZIP_PATH" >> $GITHUB_ENV
    - name: Upload Windows ZIP to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.WIN_ZIP_PATH }}
        asset_name: animref-win32-x64-${{ env.VERSION }}.zip
        asset_content_type: application/zip
